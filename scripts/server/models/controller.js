"use-strict";
const SUCCESSFUL_UPDATE = 203;
const SUCCESSFUL_GET = 200;
const SUCCESSFUL_CREATE = 201;
const { client } = require("../services/elasticsearch");
const { getIdName, getWhereToStoreResult } = require("../helpers/index");
const bodybuilder = require("bodybuilder");
const { run } = require("@jxa/run");

Date.prototype.addMilliseconds = function (count) {
  this.setMilliseconds(this.getMilliseconds() + count);
  return this;
};

async function addToRes(result, req, res) {
  res.locals[getWhereToStoreResult()] = { total: result.length, data: result };
}

function f(date) {
  return `${date.toLocaleDateString()} at ${date.toLocaleTimeString("en-US", {
    hour: "2-digit",
    minute: "2-digit",
  })}`;
}

async function exec(method, params, req, res, next) {
  try {
    return client[method]({ ...params, type: "doc" });
  } catch (e) {
    return next(e);
  }
}

function shift(d) {
  let _d = new Date(d);
  _d.setHours(_d.getHours() - 5);
  return _d;
}

class Controller {
  constructor(index) {
    this.index = index;
    this.idName = getIdName(index);
  }

  async _all(req, res, next) {
    const params = {
      index: this.index,
      body: this.getSupportedQueryParams(req, bodybuilder()),
    };
    const p = await exec("search", params, ...arguments);
    addToRes(p.body.hits.hits, ...arguments);
    res.status(SUCCESSFUL_GET);
    return next();
  }

  async _byID(req, res, next) {
    const params = {
      id: req.params[this.idName],
      index: this.index,
      body: this.getSupportedQueryParams(req, bodybuilder()),
    };
    const p = await exec("get", params, ...arguments);
    addToRes([p.body], ...arguments);
    res.status(SUCCESSFUL_GET);
    return next();
  }

  async _create(req, res, next) {
    const params = {
      index: this.index,
      body: { ...req.body, ...this.addFields(req.body) },
    };
    const p = await exec("index", params, ...arguments);
    addToRes(p, ...arguments);
    res.status(SUCCESSFUL_CREATE);
    return next();
  }

  async _bulkCreate(req, res, next) {
    const body = req.body.flatMap((d) => [
      { index: { _index: this.index } },
      Object.assign(d, this.addFields(d)),
    ]);

    const params = { index: this.index, refresh: true, body };
    const p = await exec("bulk", params, ...arguments);
    addToRes(p, ...arguments);
    res.status(SUCCESSFUL_CREATE);
    return next();
  }

  async _update(req, res, next) {
    const params = {
      id: req.params[this.idName],
      index: this.index,
      body: { doc: req.body },
    };
    const p = await exec("update", params, ...arguments);
    addToRes(p, ...arguments);
    res.status(SUCCESSFUL_UPDATE);
    return next();
  }

  async _viewInCalendar(req, res, next) {
    const params = {
      id: req.params[this.idName],
      index: this.index,
    };
    const { body } = await exec("get", params, ...arguments);
    const shiftedStartTime = shift(body._source.originalStartTime);
    await run((startTime) => {
      var Calendar = Application("Calendar");
      Calendar.switchView({ to: "day view" });
      Calendar.viewCalendar({ at: new Date(startTime) });
    }, shiftedStartTime);
    return next();
  }

  async _addToCalendar(req, res, next) {
    const params = {
      id: req.params[this.idName],
      index: this.index,
    };
    const {
      body: {
        _source: {
          originalStartTime,
          originalDuration,
          activeDuration,
          distance,
        },
      },
    } = await exec("get", params, ...arguments);
    const duration = Math.max(originalDuration, activeDuration);
    const startTime = shift(originalStartTime);
    const endTime = new Date(startTime).addMilliseconds(duration);
    const durationInMinutes = (duration / 1000 / 60).toFixed(1);
    const title = `Cycling (${durationInMinutes}min)`;
    let description = `Start: ${f(startTime)}\n`;
    description += `End: ${f(endTime)}\n`;
    description += `Duration: ${durationInMinutes}min\n`;
    description += `Distance: ${distance}mi\n\n`;
    description += `Generated by fitbit-to-strava script on ${f(new Date())}`;

    const config = { startTime, endTime, title, description };
    await run((o) => {
      var Calendar = Application("Calendar");
      var projectCalendars = Calendar.calendars.whose({
        name: "Activity",
      });
      var projectCalendar = projectCalendars[0];
      var event = Calendar.Event({
        summary: o.title,
        description: o.description,
        startDate: new Date(o.startTime),
        endDate: new Date(o.endTime),
      });
      projectCalendar.events.push(event);
      Calendar.viewCalendar({ at: new Date(o.startTime) });
    }, config);
    return next();
  }
}

module.exports = { Controller };
